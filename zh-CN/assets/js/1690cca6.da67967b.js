"use strict";(self.webpackChunknh_docs=self.webpackChunknh_docs||[]).push([[7978],{3905:function(e,n,t){t.d(n,{Zo:function(){return f},kt:function(){return g}});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var a=r.createContext({}),p=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},f=function(e){var n=p(e.components);return r.createElement(a.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,a=e.parentName,f=c(e,["components","mdxType","originalType","parentName"]),u=p(t),g=l,d=u["".concat(a,".").concat(g)]||u[g]||s[g]||o;return t?r.createElement(d,i(i({ref:n},f),{},{components:t})):r.createElement(d,i({ref:n},f))}));function g(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,i=new Array(o);i[0]=u;var c={};for(var a in n)hasOwnProperty.call(n,a)&&(c[a]=n[a]);c.originalType=e,c.mdxType="string"==typeof e?e:l,i[1]=c;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},23348:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},metadata:function(){return a},toc:function(){return p},default:function(){return s}});var r=t(22122),l=t(19756),o=(t(67294),t(3905)),i=["components"],c={title:"nhctl profile"},a={unversionedId:"cli/cli-profile",id:"cli/cli-profile",isDocsHomePage:!1,title:"nhctl profile",description:"Profile Management",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/cli/cli-profile.md",sourceDirName:"cli",slug:"/cli/cli-profile",permalink:"/zh-CN/docs/cli/cli-profile",editUrl:"https://crowdin.com/project/nocalhost/zh-CN",version:"current",frontMatter:{title:"nhctl profile"},sidebar:"docs",previous:{title:"nhctl port-forward",permalink:"/zh-CN/docs/cli/cli-port-forward"},next:{title:"nhctl pvc",permalink:"/zh-CN/docs/cli/cli-pvc"}},p=[{value:"nhctl profile get",id:"nhctl-profile-get",children:[{value:"Usage",id:"usage",children:[]},{value:"Flags",id:"flags",children:[]}]},{value:"nhctl profile set",id:"nhctl-profile-set",children:[{value:"Usage",id:"usage-1",children:[]},{value:"Flags",id:"flags-1",children:[]}]}],f={toc:p};function s(e){var n=e.components,t=(0,l.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Profile Management"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Usage:\n  nhctl profile [command]\n\nAvailable Commands:\n  get         Get a config item of Profile\n  set         Set a config item of Profile\n")),(0,o.kt)("h2",{id:"nhctl-profile-get"},"nhctl profile get"),(0,o.kt)("p",null,"Get a config item of Profile"),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"nhctl profile get [flags]\n")),(0,o.kt)("h3",{id:"flags"},"Flags"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Flags:\n  -c, --container string    container name of pod\n  -d, --deployment string   k8s workload name\n  -h, --help                help for get\n  -k, --key string          key of dev config\n  -t, --type string         specify service type (default "deployment")\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n')),(0,o.kt)("h2",{id:"nhctl-profile-set"},"nhctl profile set"),(0,o.kt)("p",null,"Set a config item of Profile"),(0,o.kt)("h3",{id:"usage-1"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"nhctl profile set [flags]\n")),(0,o.kt)("h3",{id:"flags-1"},"Flags"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Flags:\n  -c, --container string    container name of pod\n  -d, --deployment string   k8s workload name\n  -h, --help                help for set\n  -k, --key string          key of dev config\n  -t, --type string         specify service type (default "deployment")\n  -v, --value string        value of dev config\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n')))}s.isMDXComponent=!0}}]);