"use strict";(self.webpackChunknh_docs=self.webpackChunknh_docs||[]).push([[4137],{3905:function(e,r,t){t.d(r,{Zo:function(){return s},kt:function(){return f}});var n=t(67294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),p=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},s=function(e){var r=p(e.components);return n.createElement(i.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=p(t),f=o,g=u["".concat(i,".").concat(f)]||u[f]||d[f]||a;return t?n.createElement(g,l(l({ref:r},s),{},{components:t})):n.createElement(g,l({ref:r},s))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=u;var c={};for(var i in r)hasOwnProperty.call(r,i)&&(c[i]=r[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var p=2;p<a;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},31933:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return c},metadata:function(){return i},toc:function(){return p},default:function(){return d}});var n=t(22122),o=t(19756),a=(t(67294),t(3905)),l=["components"],c={title:"nhctl port-forward"},i={unversionedId:"cli/cli-port-forward",id:"cli/cli-port-forward",isDocsHomePage:!1,title:"nhctl port-forward",description:"Port-forward",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/cli/cli-port-forward.md",sourceDirName:"cli",slug:"/cli/cli-port-forward",permalink:"/zh-CN/docs/cli/cli-port-forward",editUrl:"https://crowdin.com/project/nocalhost/zh-CN",version:"current",frontMatter:{title:"nhctl port-forward"},sidebar:"docs",previous:{title:"nhctl list",permalink:"/zh-CN/docs/cli/cli-list"},next:{title:"nhctl profile",permalink:"/zh-CN/docs/cli/cli-profile"}},p=[{value:"nhctl port-forward end",id:"nhctl-port-forward-end",children:[{value:"Usage",id:"usage",children:[]},{value:"Flags",id:"flags",children:[]}]},{value:"nhctl port-forward list",id:"nhctl-port-forward-list",children:[{value:"Usage",id:"usage-1",children:[]},{value:"Flags",id:"flags-1",children:[]}]},{value:"nhctl port-forward start",id:"nhctl-port-forward-start",children:[{value:"Usage",id:"usage-2",children:[]},{value:"Flags",id:"flags-2",children:[]}]}],s={toc:p};function d(e){var r=e.components,t=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Port-forward"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Usage:\n  nhctl port-forward [command]\n\nAvailable Commands:\n  end         stop port-forward\n  list        list port-forward\n  start       Forward local port to remote pod's port\n")),(0,a.kt)("h2",{id:"nhctl-port-forward-end"},"nhctl port-forward end"),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"nhctl port-forward end [NAME] [flags]\n")),(0,a.kt)("h3",{id:"flags"},"Flags"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Flags:\n  -d, --deployment string   k8s deployment which you want to forward to\n  -h, --help                help for end\n  -p, --port string         stop specify port-forward\n  -t, --type string         specify service type (default "deployment")\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n')),(0,a.kt)("h2",{id:"nhctl-port-forward-list"},"nhctl port-forward list"),(0,a.kt)("h3",{id:"usage-1"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"nhctl port-forward list [NAME] [flags]\n")),(0,a.kt)("h3",{id:"flags-1"},"Flags"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Flags:\n  -h, --help   help for list\n      --json   use json as out put\n      --yaml   use yaml as out put\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n")),(0,a.kt)("h2",{id:"nhctl-port-forward-start"},"nhctl port-forward start"),(0,a.kt)("h3",{id:"usage-2"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"nhctl port-forward start [NAME] [flags]\n")),(0,a.kt)("h3",{id:"flags-2"},"Flags"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Flags:\n  -c, --container string    which container of pod to run command\n  -d, --deployment string   k8s deployment which you want to forward to\n  -p, --dev-port strings    port-forward between pod and local, such 8080:8080 or :8080(random localPort)\n      --follow              stock here waiting for disconnect or return immediately\n  -f, --forward             forward actually, deprecated\n  -h, --help                help for start\n      --pod string          specify pod name\n  -t, --type string         specify service type (default "deployment")\n      --way string          specify port-forward way, deprecated (default "manual")\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n')))}d.isMDXComponent=!0}}]);