"use strict";(self.webpackChunknh_docs=self.webpackChunknh_docs||[]).push([[2876],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return u}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),f=p(r),u=o,g=f["".concat(i,".").concat(u)]||f[u]||s[u]||a;return r?n.createElement(g,l(l({ref:t},d),{},{components:r})):n.createElement(g,l({ref:t},d))}));function u(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=f;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,l[1]=c;for(var p=2;p<a;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},30187:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},metadata:function(){return i},toc:function(){return p},default:function(){return s}});var n=r(22122),o=r(19756),a=(r(67294),r(3905)),l=["components"],c={title:"nhctl port-forward"},i={unversionedId:"cli/cli-port-forward",id:"cli/cli-port-forward",isDocsHomePage:!1,title:"nhctl port-forward",description:"Port-forward",source:"@site/docs/cli/cli-port-forward.md",sourceDirName:"cli",slug:"/cli/cli-port-forward",permalink:"/docs/cli/cli-port-forward",editUrl:"https://github.com/nocalhost/nocalhost.github.io/tree/main/docs/cli/cli-port-forward.md",version:"current",lastUpdatedBy:"Tank Xu",lastUpdatedAt:1658114478,formattedLastUpdatedAt:"7/18/2022",frontMatter:{title:"nhctl port-forward"},sidebar:"docs",previous:{title:"nhctl list",permalink:"/docs/cli/cli-list"},next:{title:"nhctl profile",permalink:"/docs/cli/cli-profile"}},p=[{value:"nhctl port-forward end",id:"nhctl-port-forward-end",children:[{value:"Usage",id:"usage",children:[]},{value:"Flags",id:"flags",children:[]}]},{value:"nhctl port-forward list",id:"nhctl-port-forward-list",children:[{value:"Usage",id:"usage-1",children:[]},{value:"Flags",id:"flags-1",children:[]}]},{value:"nhctl port-forward start",id:"nhctl-port-forward-start",children:[{value:"Usage",id:"usage-2",children:[]},{value:"Flags",id:"flags-2",children:[]}]}],d={toc:p};function s(e){var t=e.components,r=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Port-forward"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Usage:\n  nhctl port-forward [command]\n\nAvailable Commands:\n  end         stop port-forward\n  list        list port-forward\n  start       Forward local port to remote pod's port\n")),(0,a.kt)("h2",{id:"nhctl-port-forward-end"},"nhctl port-forward end"),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"nhctl port-forward end [NAME] [flags]\n")),(0,a.kt)("h3",{id:"flags"},"Flags"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Flags:\n  -d, --deployment string   k8s deployment which you want to forward to\n  -h, --help                help for end\n  -p, --port string         stop specify port-forward\n  -t, --type string         specify service type (default "deployment")\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n')),(0,a.kt)("h2",{id:"nhctl-port-forward-list"},"nhctl port-forward list"),(0,a.kt)("h3",{id:"usage-1"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"nhctl port-forward list [NAME] [flags]\n")),(0,a.kt)("h3",{id:"flags-1"},"Flags"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Flags:\n  -h, --help   help for list\n      --json   use json as out put\n      --yaml   use yaml as out put\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n")),(0,a.kt)("h2",{id:"nhctl-port-forward-start"},"nhctl port-forward start"),(0,a.kt)("h3",{id:"usage-2"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"nhctl port-forward start [NAME] [flags]\n")),(0,a.kt)("h3",{id:"flags-2"},"Flags"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'Flags:\n  -c, --container string    which container of pod to run command\n  -d, --deployment string   k8s deployment which you want to forward to\n  -p, --dev-port strings    port-forward between pod and local, such 8080:8080 or :8080(random localPort)\n      --follow              stock here waiting for disconnect or return immediately\n  -f, --forward             forward actually, deprecated\n  -h, --help                help for start\n      --pod string          specify pod name\n  -t, --type string         specify service type (default "deployment")\n      --way string          specify port-forward way, deprecated (default "manual")\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n')))}s.isMDXComponent=!0}}]);