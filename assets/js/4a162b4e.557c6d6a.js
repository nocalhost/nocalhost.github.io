"use strict";(self.webpackChunknh_docs=self.webpackChunknh_docs||[]).push([[8691],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return g}});var r=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=r.createContext({}),o=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=o(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=o(t),g=l,h=p["".concat(c,".").concat(g)]||p[g]||u[g]||a;return t?r.createElement(h,s(s({ref:n},d),{},{components:t})):r.createElement(h,s({ref:n},d))}));function g(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,s=new Array(a);s[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:l,s[1]=i;for(var o=2;o<a;o++)s[o]=t[o];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},87078:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},metadata:function(){return c},toc:function(){return o},default:function(){return u}});var r=t(22122),l=t(19756),a=(t(67294),t(3905)),s=["components"],i={title:"nhctl dev"},c={unversionedId:"cli/cli-dev",id:"cli/cli-dev",isDocsHomePage:!1,title:"nhctl dev",description:"Dev Operations",source:"@site/docs/cli/cli-dev.md",sourceDirName:"cli",slug:"/cli/cli-dev",permalink:"/docs/cli/cli-dev",editUrl:"https://github.com/nocalhost/nocalhost.github.io/tree/main/docs/cli/cli-dev.md",version:"current",lastUpdatedBy:"Yicai Yu",lastUpdatedAt:1654588098,formattedLastUpdatedAt:"6/7/2022",frontMatter:{title:"nhctl dev"},sidebar:"docs",previous:{title:"nhctl describe",permalink:"/docs/cli/cli-describe"},next:{title:"nhctl exec",permalink:"/docs/cli/cli-exec"}},o=[{value:"nhctl dev associate",id:"nhctl-dev-associate",children:[{value:"Usage",id:"usage",children:[]},{value:"Flags",id:"flags",children:[]}]},{value:"nhctl dev cmd",id:"nhctl-dev-cmd",children:[{value:"Usage",id:"usage-1",children:[]},{value:"Flags",id:"flags-1",children:[]}]},{value:"nhctl dev end",id:"nhctl-dev-end",children:[{value:"Usage",id:"usage-2",children:[]},{value:"Flags",id:"flags-2",children:[]}]},{value:"nhctl dev reset",id:"nhctl-dev-reset",children:[{value:"Usage",id:"usage-3",children:[]},{value:"Flags",id:"flags-3",children:[]}]},{value:"nhctl dev start",id:"nhctl-dev-start",children:[{value:"Usage",id:"usage-4",children:[]},{value:"Flags",id:"flags-4",children:[]}]},{value:"nhctl dev terminal",id:"nhctl-dev-terminal",children:[{value:"Usage",id:"usage-5",children:[]},{value:"Flags",id:"flags-5",children:[]}]}],d={toc:o};function u(e){var n=e.components,t=(0,l.Z)(e,s);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Dev Operations"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Usage:\n  nhctl dev [command]\n\nAvailable Commands:\n  associate   associate service dev dir\n  cmd         Run cmd in dev container\n  end         end dev model\n  reset       reset service\n  start       Start DevMode\n  terminal    Enter dev container's terminal\n")),(0,a.kt)("h2",{id:"nhctl-dev-associate"},"nhctl dev associate"),(0,a.kt)("p",null,"Associate service dev dir"),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"nhctl dev associate [Name] [flags]\n")),(0,a.kt)("h3",{id:"flags"},"Flags"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Flags:\n  -s, --associate string         dev mode work directory\n  -t, --controller-type string   kind of k8s controller,such as deployment,statefulSet\n      --de-associate             de associate(for test)\n  -d, --deployment string        k8s deployment which your developing service exists\n  -h, --help                     help for associate\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n")),(0,a.kt)("h2",{id:"nhctl-dev-cmd"},"nhctl dev cmd"),(0,a.kt)("p",null,"Run cmd in dev container"),(0,a.kt)("h3",{id:"usage-1"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"nhctl dev cmd [NAME] [flags]\n")),(0,a.kt)("h3",{id:"flags-1"},"Flags"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Flags:\n  -c, --container string          which container of pod to run command\n  -t, --controller-type string    kind of k8s controller,such as deployment,statefulSet\n  -d, --deployment string         K8s deployment which your developing service exists\n      --dev-command-type string   Dev command type can be: build, run, debug, hotReloadRun, hotReloadDebug\n  -h, --help                      help for cmd\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n")),(0,a.kt)("h2",{id:"nhctl-dev-end"},"nhctl dev end"),(0,a.kt)("p",null,"End dev model"),(0,a.kt)("h3",{id:"usage-2"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"nhctl dev end [NAME] [flags]\n")),(0,a.kt)("h3",{id:"flags-2"},"Flags"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Flags:\n  -t, --controller-type string   kind of k8s controller,such as deployment,statefulSet\n  -d, --deployment string        k8s deployment which your developing service exists\n  -h, --help                     help for end\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n")),(0,a.kt)("h2",{id:"nhctl-dev-reset"},"nhctl dev reset"),(0,a.kt)("p",null,"Reset service"),(0,a.kt)("h3",{id:"usage-3"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"nhctl dev reset [NAME] [flags]\n")),(0,a.kt)("h3",{id:"flags-3"},"Flags"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Flags:\n  -t, --controller-type string   kind of k8s controller,such as deployment,statefulSet\n  -d, --deployment string        k8s deployment which your developing service exists\n  -h, --help                     help for reset\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n")),(0,a.kt)("h2",{id:"nhctl-dev-start"},"nhctl dev start"),(0,a.kt)("p",null,"Start DevMode"),(0,a.kt)("h3",{id:"usage-4"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"nhctl dev start [NAME] [flags]\n")),(0,a.kt)("h3",{id:"flags-4"},"Flags"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Flags:\n  -c, --container string           container to develop\n  -t, --controller-type string     kind of k8s controller,such as deployment,statefulSet\n  -d, --deployment string          k8s deployment your developing service exists\n  -h, --help                       help for start\n  -i, --image string               image of DevContainer\n  -s, --local-sync strings         local directory to sync\n      --priority-class string      PriorityClass used by devContainer\n      --shell string               use current shell cmd to enter terminal while dev start success\n      --sidecar-image string       image of nocalhost-sidecar container\n      --storage-class string       StorageClass used by PV\n      --syncthing-version string   versions of syncthing and this flag is use for debug only\n      --without-sync               do not start file-sync while dev start success\n      --without-terminal           do not enter terminal directly while dev start success\n      --work-dir string            container's work directory\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n")),(0,a.kt)("h2",{id:"nhctl-dev-terminal"},"nhctl dev terminal"),(0,a.kt)("p",null,"Enter dev container's terminal"),(0,a.kt)("h3",{id:"usage-5"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"nhctl dev terminal [NAME] [flags]\n")),(0,a.kt)("h3",{id:"flags-5"},"Flags"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Flags:\n  -c, --container string         container to enter\n  -t, --controller-type string   kind of k8s controller,such as deployment,statefulSet\n  -d, --deployment string        k8s deployment which your developing service exists\n  -h, --help                     help for terminal\n      --pod string               pod to enter\n      --shell string             shell cmd while enter dev container\n\nGlobal Flags:\n      --debug               enable debug level log\n      --kubeconfig string   the path of the kubeconfig file\n  -n, --namespace string    kubernetes namespace\n")))}u.isMDXComponent=!0}}]);